// 动态规划问题的一般形式就是求最值。
    // 动态规划其实是运筹学的一种最优化方法，只不过在计算机问题上应用比较多，
    // 比如说让你求最长递增子序列呀，最小编辑距离呀等等。

// 动态规划的穷举有点特别，因为这类问题存在「重叠子问题」，
    // 如果暴力穷举的话效率会极其低下，所以需要「备忘录」或者「DP table」来优化穷举过程，避免不必要的计算。
// 动态规划问题一定会具备「最优子结构」，才能通过子问题的最值得到原问题的最值。
// 虽然动态规划的核心思想就是穷举求最值，但是问题可以千变万化，穷举所有可行解其实并不是一件容易的事，
    // 只有列出**正确的「状态转移方程」**才能正确地穷举。

// 重叠子问题、最优子结构、状态转移方程就是动态规划三要素

// 明确 base case -> 明确「状态」-> 明确「选择」 -> 定义 dp 数组/函数的含义。

// 509.斐波那契数:没有涉及到最优子结构
// 322.零钱兑换 状态转移方程就是dp[i] = Math.min(dp[i], dp[i - coin] + 1);
